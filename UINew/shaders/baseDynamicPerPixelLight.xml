<vertexShader zIndex="9">
    <uniforms>
        <uniform prefix="highp" name="lightPosition"/>
        <uniform prefix="highp" name="cameraViewMatrix"/>
        <uniform prefix="highp" name="cameraPosition"/>
        <uniform prefix="highp" name="modelNormalMatrix"/>
    </uniforms>
    <attributes>
        <attribute prefix="highp" name="a_normal" localVar="true"/>
    </attributes>
    <varyings>
        <varying prefix="highp" type="vec3" name="normal_v"/>
        <varying prefix="highp" type="vec3" name="lightPosition_v"/>
        
        <varying prefix="highp" type="vec3" name="l_var"/>
        <varying prefix="highp" type="vec3" name="v_var"/>
    </varyings>
    <code>
        lightPosition_v  = normalize(vec3(lightPosition));
        
        l_var = normalize ( vec3 ( 0.0,5000.0,0.0 ) - vec3(position.xyz));					// vector to light source
        v_var = normalize ( vec3 ( cameraPosition ) - vec3(position.xyz));					// vector to the eye
        
        
        
        normal_v = normalize(normal*modelNormalMatrix);
    </code>
</vertexShader>
<fragmentShader zIndex="1">
    <uniforms>
        <uniform prefix="highp" name="specularPower"/>
        <uniform prefix="highp" name="modelNormalMatrix"/>
    </uniforms>
    <localVars>
        <localVar prefix="highp" type="vec3" name="specular_l" code="vec3(0.5,0.5,0.5);"/>
        <localVar prefix="highp" type="vec3" name="normal_l" code="normal_v;"/>
    </localVars>
    <code>
 
        highp vec4  diffColor = color;
        highp vec4  specColor = vec4 (specular_l.x,specular_l.y,specular_l.z, 1.0 );
        
        highp vec3 n2   = normalize ( normal_v );
        highp vec3 l2   = normalize ( l_var );
        highp vec3 v2   = normalize ( v_var );
        highp vec3 r    = reflect ( -v2, n2 );
        highp vec4 diff = diffColor * max ( dot ( n2, l2 ), 0.0 );
        highp vec4 spec = specColor * pow ( max ( dot ( l2, r ), 0.0 ), specularPower );
        
        color = diff + spec;
    </code>
</fragmentShader>